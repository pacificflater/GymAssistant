import re
import requests
import telebot
from config import settings

bot  = telebot.TeleBot(settings.BOT_API_TOKEN)

ALLOWED_USERS = [int(user_id.strip()) for user_id in settings.ALLOWED_USERS.split(',') if user_id.strip()]

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """
    –ü—Ä–∏–≤–µ—Ç, —è Gym Assistant bot üèãÔ∏è
    –Ø –ø–æ–º–æ–≥—É –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É üí™
    """)

@bot.message_handler()
def get_message(message):
    try:
        if message.from_user.id not in ALLOWED_USERS:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        if message.content_type != 'text':
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return

        user_text = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(user_text) < 5:
            bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        if len(user_text) > 2000:
            bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not user_text.strip():
            bot.send_message(message.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if user_text.startswith('/'):
            bot.send_message(message.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥—ã!")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['text'] = user_text


        bot.delete_state(message.from_user.id, message.chat.id)
        response = send_message_to_api(user_text)
        for workout in response:
            bot.send_message(message.chat.id, f'```\n{workout}\n```', parse_mode="Markdown")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def send_message_to_api(message):
    url = f'http://{settings.BACKEND_URL}:8000/new-message/'
    data = {"text": f"{message}"}

    response = requests.post(url, json=data)

    response_data = response.json()
    result_text = response_data['message_formatted']
    split_result = split_workouts(result_text)
    return split_result


def split_workouts(text):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –Ω–∞—á–∞–ª—É –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (### –¢–†–ï–ù–ò–†–û–í–ö–ê)

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
    """

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    pattern = r'(### .*–¢–†–ï–ù–ò–†–û–í–ö–ê \d+)'

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    matches = list(re.finditer(pattern, text))

    if not matches:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–Ω—É —á–∞—Å—Ç—å
        return [text]

    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    parts = []

    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    first_match = matches[0]
    if first_match.start() > 0:
        parts.append(text[:first_match.start()].strip())

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    for i in range(len(matches)):
        start_pos = matches[i].start()
        if i < len(matches) - 1:
            end_pos = matches[i + 1].start()
            parts.append(text[start_pos:end_pos].strip())
        else:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
            parts.append(text[start_pos:].strip())

    return parts

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot started...")
    bot.infinity_polling()
